name: Build

on:
  workflow_call:
    inputs:
      ref:
        type: string
        default: ${{ github.ref }}
      release:
        description: if this is a release build
        type: boolean
        default: false

jobs:
  build:
    name: ${{ matrix.id }} (${{ matrix.target }}) (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        id:
          # - linux-arm64
          # - linux-arm64-musl
          # - linux-arm
          # - linux-arm-musl
          # - linux-armhf
          # - linux-armhf-musl
          # - linux-armv5te
          # - linux-armv7l
          # - linux-armv7l-musl
          # - linux-x64
          # - linux-x64-musl
          # - linux-x86
          # - linux-x86-musl
          # - linux-i586
          # - linux-i586-musl
          # - linux-mips64le
          # - linux-powerpc64el
          # - linux-powerpc64el-musl
          # - linux-s390x
          # - linux-s390x-musl
          - macos-arm64
          # - macos-x64
          # - windows-x64

        include:
          # When adding a new target, define a new id above

          #
          # Linux
          #

          # - id: linux-arm64
          #   target: aarch64-unknown-linux-gnu
          #   os: ubuntu-latest
          #   platform: linux/arm64/v8
          #   architecture: "AArch64"

          # - id: linux-arm64-musl
          #   target: aarch64-unknown-linux-musl
          #   os: ubuntu-latest
          #   platform: linux/arm64/v8
          #   architecture: "AArch64"

          # - id: linux-arm
          #   target: arm-unknown-linux-gnueabi
          #   os: ubuntu-latest
          #   platform: linux/arm/v6
          #   architecture: "ARM"

          # - id: linux-arm-musl
          #   target: arm-unknown-linux-musleabi
          #   os: ubuntu-latest
          #   platform: linux/arm/v6
          #   architecture: "ARM"

          # - id: linux-armhf
          #   target: arm-unknown-linux-gnueabihf
          #   os: ubuntu-latest
          #   platform: linux/arm/v7
          #   architecture: "ARM"

          # - id: linux-armhf-musl
          #   target: arm-unknown-linux-musleabihf
          #   os: ubuntu-latest
          #   platform: linux/arm/v7
          #   architecture: "ARM"

          # - id: linux-armv5te
          #   target: armv5te-unknown-linux-gnueabi
          #   os: ubuntu-latest
          #   platform: linux/arm/v5
          #   architecture: "ARM"

          # - id: linux-armv7l
          #   target: armv7-unknown-linux-gnueabihf
          #   os: ubuntu-latest
          #   platform: linux/arm/v7
          #   architecture: "ARM"

          # - id: linux-armv7l-musl
          #   target: armv7-unknown-linux-musleabihf
          #   os: ubuntu-latest
          #   platform: linux/arm/v7
          #   architecture: "ARM"

          # - id: linux-x64
          #   target: x86_64-unknown-linux-gnu
          #   os: ubuntu-latest
          #   platform: linux/amd64
          #   architecture: "Advanced Micro Devices X86-64"

          # - id: linux-x64-musl
          #   target: x86_64-unknown-linux-musl
          #   os: ubuntu-latest
          #   platform: linux/amd64
          #   architecture: "Advanced Micro Devices X86-64"

          # - id: linux-x86
          #   target: i686-unknown-linux-gnu
          #   os: ubuntu-latest
          #   platform: linux/386
          #   architecture: "Intel 80386"

          # - id: linux-x86-musl
          #   target: i686-unknown-linux-musl
          #   os: ubuntu-latest
          #   platform: linux/386
          #   architecture: "Intel 80386"

          # - id: linux-i586
          #   target: i586-unknown-linux-gnu
          #   os: ubuntu-latest
          #   platform: linux/386
          #   architecture: "Intel 80386"

          # - id: linux-i586-musl
          #   target: i586-unknown-linux-musl
          #   os: ubuntu-latest
          #   platform: linux/386
          #   architecture: "Intel 80386"

          # - id: linux-mips64le
          #   target: mips64-unknown-linux-gnuabi64
          #   os: ubuntu-latest
          #   platform: linux/mips64le
          #   architecture: "MIPS R3000"

          # - id: linux-powerpc64el
          #   target: powerpc64le-unknown-linux-gnu
          #   os: ubuntu-latest
          #   platform: linux/ppc64le
          #   architecture: "PowerPC64"

          # - id: linux-powerpc64el-musl
          #   target: powerpc64le-unknown-linux-musl
          #   os: ubuntu-latest
          #   platform: linux/ppc64le
          #   architecture: "PowerPC64"

          # - id: linux-s390x
          #   target: s390x-unknown-linux-gnu
          #   os: ubuntu-latest
          #   platform: linux/s390x
          #   architecture: "IBM S/390"

          # - id: linux-s390x-musl
          #   target: s390x-unknown-linux-musl
          #   os: ubuntu-latest
          #   platform: linux/s390x
          #   architecture: "IBM S/390"

          #
          # MacOS
          #

          - id: macos-arm64
            target: aarch64-apple-darwin
            os: macos-15
            architecture: "arm64"

          # - id: macos-x64
          #   target: x86_64-apple-darwin
          #   os: macos-13
          #   architecture: "x86_64"

          #
          # Windows
          #

          # - id: windows-x64
          #   target: x86_64-pc-windows-msvc
          #   os: windows-latest
          #   architecture: "x86-64"

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Setup environment
        env:
          P12_BASE64: ${{ secrets.APPLE_DEV_ID_P12_BASE64 }}
          CERT_PASSWORD: ${{ secrets.APPLE_CERT_PASSWORD }}
        run: |
          version=$(echo "${{ github.ref_name }}" | grep '^[0-9]*.[0-9]*.[0-9]*$') || true

          if [ -z "$version" ]; then
            # Set default version for non-release builds
            version="17.5.0"
          fi

          root_directory="$(pwd)"
          archive="postgresql-$version-${{ matrix.target }}"
          install_directory="$root_directory/$archive"

          echo "ARCHIVE=$archive" | tee -a $GITHUB_ENV
          echo "INSTALL_DIRECTORY=$install_directory" | tee -a $GITHUB_ENV
          echo "ROOT_DIRECTORY=$root_directory" | tee -a $GITHUB_ENV
          echo "VERSION=$version" | tee -a $GITHUB_ENV

      #
      # Linux Build
      #

      - name: Install emulators and configure build (Linux)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          platform="${{ matrix.platform }}";

          docker run --privileged --rm tonistiigi/binfmt --install all

          if [[ "${{ matrix.id }}" = *musl* ]]; then
            echo "DOCKERFILE=dockerfiles/Dockerfile.linux-musl" | tee -a $GITHUB_ENV
          else
            echo "DOCKERFILE=dockerfiles/Dockerfile.linux-gnu" | tee -a $GITHUB_ENV
          fi

          echo "PLATFORM=$platform" | tee -a $GITHUB_ENV

      - name: Build (Linux)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          cp $DOCKERFILE Dockerfile
          docker buildx build --build-arg "POSTGRESQL_VERSION=$VERSION" --platform "$PLATFORM" --tag postgresql-build:latest .

          docker create --platform "$PLATFORM" --name pgbuild postgresql-build:latest
          docker cp pgbuild:/opt/postgresql $INSTALL_DIRECTORY
          docker rm -f pgbuild

      #
      # MacOS Build
      #
      - name: Import Macos Key (Macos)
        if: ${{ startsWith(matrix.id, 'macos-') }}
        env:
          P12_BASE64: ${{ secrets.APPLE_BASE64 }}
          CERT_PASSWORD: ${{ secrets.APPLE_BASE64_PWD }}
        run: |
          P12_BASE64='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'
          CERT_PASSWORD=GfYEINmEy5dHfb

          echo "$P12_BASE64" | base64 --decode > DeveloperID.p12
          security create-keychain -p "" build.keychain
          security set-keychain-settings build.keychain
          security unlock-keychain -p "" build.keychain
          cat DeveloperID.p12
          security import DeveloperID.p12 -k build.keychain -P "$CERT_PASSWORD" -T /usr/bin/codesign
          security list-keychains -d user -s build.keychain
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
          rm DeveloperID.p12

      - name: Checkout postgresql source code (MacOS)
        if: ${{ startsWith(matrix.id, 'macos-') }}
        run: |
          source_directory="$ROOT_DIRECTORY/postgresql-src"
          branch=$(echo "$VERSION" | awk -F. '{print "REL_"$1"_"$2}')
          git clone --depth 1 --branch $branch -c advice.detachedHead=false https://git.postgresql.org/git/postgresql.git "$source_directory"
          echo "SOURCE_DIRECTORY=$source_directory" | tee -a $GITHUB_ENV

      - name: Configure build (MacOS)
        if: ${{ startsWith(matrix.id, 'macos-') }}
        run: |
          brew install \
            fop \
            gettext \
            icu4c \
            lld \
            llvm \
            lz4 \
            openssl \
            readline \
            xz \
            zstd

          brew_dir="/usr/local"
          if [ "${{ matrix.id }}" == "macos-arm64" ]; then
            brew_dir="/opt/homebrew"
          fi
          brew_opt_dir="$brew_dir/opt"
          ls -l "$brew_opt_dir"

          echo "BREW_OPT_DIR=$brew_opt_dir" | tee -a $GITHUB_ENV
          echo "CPPFLAGS=-I${brew_opt_dir}/icu4c/include -I${brew_opt_dir}/openssl/include" | tee -a $GITHUB_ENV
          echo "LDFLAGS=-L${brew_opt_dir}/icu4c/lib -L${brew_opt_dir}/openssl/lib" | tee -a $GITHUB_ENV
          echo "LLVM_CONFIG=${brew_opt_dir}/llvm/bin/llvm-config" | tee -a $GITHUB_ENV

      - name: Build (MacOS)
        if: ${{ startsWith(matrix.id, 'macos-') }}
        env:
          BREW_OPT_DIR: ${{env.BREW_OPT_DIR}}
        run: |
          cd "$SOURCE_DIRECTORY"
          major_version=$(echo "$POSTGRESQL_VERSION" | awk -F. '{print $1}')

          ./configure $build_directory \
            --prefix "$INSTALL_DIRECTORY" \
            --enable-integer-datetimes \
            --enable-option-checking=fatal \
            $([ $major_version -le 16 ] && echo "--enable-thread-safety") \
            $([ $major_version -ge 14 ] && echo "--with-icu" || echo "--without-icu") \
            --without-ldap \
            --with-libxml \
            --with-libxslt \
            $([ $major_version -ge 16 ] && echo "--with-llvm") \
            $([ $major_version -ge 14 ] && echo "--with-lz4") \
            --with-openssl \
            --with-pgport=5432 \
            $([ $major_version -ge 15 ] && echo "--with-python") \
            --with-readline \
            --with-system-tzdata=/usr/share/zoneinfo \
            --with-uuid=e2fs \
            $([ $major_version -ge 16 ] && echo "--with-zstd")
          make $([ $major_version -ge 15 ] && echo "world-bin")
          make $([ $major_version -ge 15 ] && echo "install-world-bin" || echo "install")
          make -C contrib install

          echo "$(brew --prefix openssl)"
          ls "$(brew --prefix openssl)"
          ls "$(brew --prefix openssl)/lib"

          cp "$SOURCE_DIRECTORY/COPYRIGHT" "$INSTALL_DIRECTORY"
          cp "$BREW_OPT_DIR/openssl/lib/libssl.3.dylib" "$BREW_OPT_DIR/openssl/lib/libcrypto.3.dylib" "$INSTALL_DIRECTORY/lib" || true
          cp "$(brew --prefix openssl)/lib/libssl.3.dylib" "$(brew --prefix openssl)/lib/libcrypto.3.dylib" "$INSTALL_DIRECTORY/lib" || true
          cd "$ROOT_DIRECTORY"

      # This allows the MacOS build to be relocated to a different directory
      - name: Update library paths (MacOS)
        if: ${{ startsWith(matrix.id, 'macos-') }}
        env:
          BREW_OPT_DIR: ${{env.BREW_OPT_DIR}}
          P12_BASE64: ${{ secrets.APPLE_DEV_ID_P12_BASE64 }}
          CERT_PASSWORD: ${{ secrets.APPLE_CERT_PASSWORD }}
        run: |
          set +x
          find $INSTALL_DIRECTORY/bin -type f | xargs -L 1 install_name_tool -change $INSTALL_DIRECTORY/lib/libpq.5.dylib '@executable_path/../lib/libpq.5.dylib'

          find $INSTALL_DIRECTORY/bin -type f | while read binary; do
            install_name_tool -change "$BREW_OPT_DIR/openssl@3/lib/libssl.3.dylib" "@executable_path/../lib/libssl.3.dylib" "$binary" || true
            install_name_tool -change "$(brew --prefix openssl)/lib/libssl.3.dylib" "@executable_path/../lib/libssl.3.dylib" "$binary" || true
            install_name_tool -change "$BREW_OPT_DIR/openssl@3/lib/libcrypto.3.dylib" "@executable_path/../lib/libcrypto.3.dylib" "$binary" || true
            install_name_tool -change "$(brew --prefix openssl)/lib/libcrypto.3.dylib" "@executable_path/../lib/libcrypto.3.dylib" "$binary" || true
          done

          # 替换所有动态库以来openssl的，排除掉两个openssl库，在下面单独处理
          find "$INSTALL_DIRECTORY/lib" -type f -name "*.dylib" ! -name "libssl.3.dylib" ! -name "libcrypto.3.dylib" | while read binary; do
            install_name_tool -change "$BREW_OPT_DIR/openssl@3/lib/libssl.3.dylib" "@executable_path/../lib/libssl.3.dylib" "$binary" || true
            install_name_tool -change "$(brew --prefix openssl)/lib/libssl.3.dylib" "@executable_path/../lib/libssl.3.dylib" "$binary" || true
            install_name_tool -change "$BREW_OPT_DIR/openssl@3/lib/libcrypto.3.dylib" "@executable_path/../lib/libcrypto.3.dylib" "$binary" || true
            install_name_tool -change "$(brew --prefix openssl)/lib/libcrypto.3.dylib" "@executable_path/../lib/libcrypto.3.dylib" "$binary" || true
          done

          install_name_tool -add_rpath "@loader_path/../lib" $INSTALL_DIRECTORY/bin/postgres

          install_name_tool -id "@rpath/libssl.3.dylib" $INSTALL_DIRECTORY/lib/libssl.3.dylib
          install_name_tool -id "@rpath/libcrypto.3.dylib" $INSTALL_DIRECTORY/lib/libcrypto.3.dylib

          install_name_tool -change "$BREW_OPT_DIR/openssl@3/lib/libcrypto.3.dylib" "@rpath/libcrypto.3.dylib" $INSTALL_DIRECTORY/lib/libssl.3.dylib
          install_name_tool -change "$(brew --prefix openssl)/lib/libcrypto.3.dylib" "@rpath/libcrypto.3.dylib" $INSTALL_DIRECTORY/lib/libssl.3.dylib
          install_name_tool -change "/opt/homebrew/Cellar/openssl@3/3.5.0/lib/libcrypto.3.dylib" "@rpath/libcrypto.3.dylib" $INSTALL_DIRECTORY/lib/libssl.3.dylib || true
          install_name_tool -change "/usr/local/Cellar/openssl@3/3.5.0/lib/libcrypto.3.dylib" "@rpath/libcrypto.3.dylib" $INSTALL_DIRECTORY/lib/libssl.3.dylib || true

          codesign --force --sign - "$INSTALL_DIRECTORY/lib/libcrypto.3.dylib"
          codesign --force --sign - "$INSTALL_DIRECTORY/lib/libssl.3.dylib"

      #
      # Windows
      #

      - name: Download binaries (Windows)
        if: ${{ startsWith(matrix.id, 'windows-') }}
        run: |
          postgresql_version=$(echo "$VERSION" | awk -F. '{print $1"."$2}')
          curl https://get.enterprisedb.com/postgresql/postgresql-${postgresql_version}-1-windows-x64-binaries.zip > postgresql.zip

      - name: Extract binaries (Windows)
        if: ${{ startsWith(matrix.id, 'windows-') }}
        run: |
          unzip postgresql.zip
          rm -rf pgsql/doc pgsql/pgAdmin*
          mv pgsql "$INSTALL_DIRECTORY"

      #
      # Package
      #

      - name: Prepare archive
        run: |
          cp $ROOT_DIRECTORY/{README.md,LICENSE} "$INSTALL_DIRECTORY"
          ls -l "$INSTALL_DIRECTORY/"

      # The .tar.gz archive is the primary archive for all platforms.  This archive
      # provides a consistent experience for programmatic cases (e.g. embedded).
      - name: Build archive (Linux, MacOS)
        if: ${{ !startsWith(matrix.id, 'windows-') }}
        run: |
          tar czf "$ARCHIVE.tar.gz" "$ARCHIVE"
          shasum -a 256 "$ARCHIVE.tar.gz" > "$ARCHIVE.tar.gz.sha256"
          echo "ASSET=$ARCHIVE.tar.gz" | tee -a $GITHUB_ENV
          echo "ASSET_SUM=$ARCHIVE.tar.gz.sha256" | tee -a $GITHUB_ENV

      - name: Build archive (Windows)
        if: ${{ startsWith(matrix.id, 'windows-') }}
        run: |
          tar czf "$ARCHIVE.tar.gz" "$ARCHIVE"
          certutil -hashfile "$ARCHIVE.tar.gz" SHA256 > "$ARCHIVE.tar.gz.sha256"
          echo "ASSET=$ARCHIVE.tar.gz" | tee -a $GITHUB_ENV
          echo "ASSET_SUM=$ARCHIVE.tar.gz.sha256" | tee -a $GITHUB_ENV

      # The zip archive for Windows is created as a convenience to users for manual installations.
      - name: Build .zip archive (Windows)
        if: ${{ startsWith(matrix.id, 'windows-') }}
        run: |
          7z a "$ARCHIVE.zip" "$ARCHIVE"
          certutil -hashfile "$ARCHIVE.zip" SHA256 > "$ARCHIVE.zip.sha256"
          echo "WINDOWS_ASSET=$ARCHIVE.zip" >> $GITHUB_ENV
          echo "WINDOWS_ASSET_SUM=$ARCHIVE.zip.sha256" >> $GITHUB_ENV

      #
      # Test
      #

      - name: Test the binary file cpu architecture
        run: |
          postgres_file="$INSTALL_DIRECTORY/bin/postgres"

          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            cpu_architecture=$(readelf --file-header "$postgres_file" | grep 'Machine:')
          else
            cpu_architecture=$(file "$postgres_file")
          fi

          echo "CPU_ARCHITECTURE=$cpu_architecture" | tee -a $GITHUB_ENV

          if [[ "$cpu_architecture" != *"${{ matrix.architecture }}"* ]]; then
            echo "ERROR: CPU architecture ($cpu_architecture) does not match expected architecture (${{ matrix.architecture }})"
            exit 1
          fi

      - name: Test build / archive
        run: |
          test_directory=$(mktemp -d)
          tar xzf "$ARCHIVE.tar.gz" -C "$test_directory"
          cd "$test_directory/$ARCHIVE"
          cp "$ROOT_DIRECTORY/scripts/test.sh" .

          if [[ "${{ matrix.id }}" = macos* ]]; then
            echo "Testing MacOS"
            ./test.sh $VERSION
          elif [[ "${{ matrix.id }}" = windows* ]]; then
            echo "Testing Windows"
            ./test.sh $VERSION
          elif [[ "${{ matrix.id }}" = *musl* ]]; then
            echo "Testing Linux MUSL"
            docker run \
              --platform "$PLATFORM" \
              --tty \
              --volume $(pwd):/opt/test \
              postgresql-build:latest \
              /bin/sh -c "cd /opt/test && ls -l && ./test.sh $VERSION"
          else
            echo "Testing Linux GNU"
            docker run \
              --platform "$PLATFORM" \
              --tty \
              --volume $(pwd):/opt/test \
              postgresql-build:latest \
              /bin/sh -c "cd /opt/test && ls -l && ./test.sh $VERSION"
          fi

      #
      # Release
      #

      - name: Upload release archive
        if: ${{ inputs.release == true }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload "$VERSION" ${{ env.ASSET }} ${{ env.ASSET_SUM }}

      - name: Upload release archive (Windows)
        if: ${{ inputs.release == true && startsWith(matrix.id, 'windows-') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload "$VERSION" ${{ env.WINDOWS_ASSET }} ${{ env.WINDOWS_ASSET_SUM }}
